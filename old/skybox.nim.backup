#   Copyright (c) 2024 by John Carlson

import os, math, raylib, raymath, rlgl

const
  screenWidth = 800
  screenHeight = 450
proc customMatrixPerspective(fovy, aspect, znear, zfar: float32): Matrix =
    let top = znear * sin(fovy * 3.141592654 / 360.0)/cos(fovy * 3.141592654 / 360.0)
    let right = top * aspect
    result = Matrix(
      m0: znear / right,  m1: 0.0,           m2: 0.0,                          m3: 0.0,
      m4: 0.0,            m5: znear / top,    m6: 0.0,                          m7: 0.0,
      m8: 0.0,            m9: 0.0,           m10: -(zfar + znear) / (zfar - znear), m11: -1.0,
      m12: 0.0,           m13: 0.0,           m14: -(2.0 * zfar * znear) / (zfar - znear), m15: 0.0
    )
    return result

proc main =
  initWindow(screenWidth, screenHeight, "JSONverse shaders example - skybox")
  defer: closeWindow()

  let camera = Camera(
    position : Vector3( x:0.0f, y:0.5f, z:0.5f ),
    target :   Vector3( x:0.0f, y:0.0f, z:0.0f ),
    up :       Vector3( x:0.0f, y:1.0f, z:0.0f ),
    fovy : 45.0f,
    projection : Perspective
  )

  var skybox = genMeshCube(1.0f, 1.0f, 1.0f)
  var skyboxModel = loadModelFromMesh(skybox)


  let shader = loadShader("shaders/rlskybox.vs", "shaders/rlskybox.fs")
  let cubemapLoc = getShaderLocation(shader, "cube")

  let hdrTexture = loadImage("resources/images/all_probes/stpeters_probe.hdr")
  let skyboxTexture = loadTextureCubemap(hdrTexture, CUBEMAP_LAYOUT_AUTO_DETECT)

  skyboxModel.materials[0].shader = shader
  skyboxModel.materials[0].maps[MaterialMapIndex.MATERIAL_MAP_CUBEMAP.int].texture = skyboxTexture

  let screenSize = [getScreenWidth().float32, getScreenHeight().float32]
  setShaderValueTexture(shader, cubemapLoc, hdrTexture)
  setShaderValue(shader, getShaderLocation(shader, "size"), screenSize)

  unloadImage(hdrSkybox);

  setTargetFPS(60) # Set our game to run at 60 frames-per-second

  while not windowShouldClose(): # Detect window close button or ESC key
    beginDrawing()
    clearBackground(Black)

    beginMode3D(camera)
    drawModel(skyboxModel, Vector3(x: pos.x, y: pos.y, z: pos.z), 1.0f, White)
    endMode3D()

    endDrawing()

  unloadShader(shader)
  unloadTexture(hdrTexture)
  unloadTexture(skyboxTexture)
  unloadModel(skyboxModel)

main()
