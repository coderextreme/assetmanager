import ptr_math, os, math, raylib, raymath, rlgl

const
  screenWidth = 800
  screenHeight = 450

type
  LightKind = enum # Light type
    Directional, Point, Spot

  Light = object # Light data
    enabled: int32
    kind: int32
    position: Vector3
    target: Vector3
    color: array[4, float32]
    intensity: float32

proc main =
  initWindow(screenWidth, screenHeight, "JSONverse shaders example - skybox")
  defer: closeWindow()

  let skybox = genMeshCube(1.0f, 1.0f, 1.0f)
  let skyboxModel = loadModelFromMesh(skybox)

  let camera = Camera(
    position: Vector3(x: 0, y: 0, z: 6),
    target: Vector3(x: 0, y: 0, z: 0),
    up: Vector3(x: 0, y: 1, z: 0),
    fovy: 45,
    projection: Perspective
  )
  #let camera = Camera(
  #  position : Vector3( x:0.0f, y:0.5f, z:0.5f ),
  #  target :   Vector3( x:0.0f, y:0.0f, z:0.0f ),
  #  up :       Vector3( x:0.0f, y:1.0f, z:0.0f ),
  #  fovy : 45.0f,
  #  projection : Perspective
  #)

  let light = Light(
      enabled: 1,
      kind: int32(Point),
      position: Vector3(x: 0, y: 0.9, z: 0),
      target: Vector3(x: 0, y: 0, z: 0),
      color: [1.0'f32, 0.0'f32, 0.0'f32, 0.5'f32],
      intensity: 1.0f
    )
  let img = genImageChecked(64, 64, 32, 32, DarkBrown, DarkGray)
  let backgroundTexture = loadTextureFromImage(img)

  setTargetFPS(60)

  while not windowShouldClose():
    beginDrawing()
    clearBackground(Black)
    beginMode3D(camera)

    #drawTexture(backgroundTexture,
    #    Rectangle(x: 0, y: 0, width: getScreenWidth().float32, height: getScreenHeight().float32),
    #    Vector2.zero, White)

    drawModel(skyboxModel, Vector3(x: 0, y: 0, z: 0), 1.0f, White)

    let lightColor = Color(
        r: uint8(light.color[0]*255),
        g: uint8(light.color[1]*255),
        b: uint8(light.color[2]*255),
        a: uint8(light.color[3]*255)
    )
    #if light.enabled == 1:
    #  drawSphere(light.position, 0.2, 8, 8, lightColor)
    if light.enabled == 1:
      drawSphere(light.position, 0.2, lightColor)
    endMode3D()

    endDrawing()

main()
